{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/eliothyenne/Daneo/app/screens/LearnWordScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { COLORS } from \"../config/colors.js\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nvar LearnWordScreen = function LearnWordScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      vocabList = _useState2[0],\n      setVocabList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lessonList = _useState4[0],\n      setLessonList = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lessonListFound = _useState6[0],\n      setLessonListFound = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      noLessons = _useState8[0],\n      setNoLessons = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentWordIndex = _useState10[0],\n      setCurrentWordIndex = _useState10[1];\n\n  var getLessonList = function getLessonList() {\n    var currentVocabList, tempLessonList, i;\n    return _regeneratorRuntime.async(function getLessonList$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"@vocabList\"));\n\n          case 2:\n            currentVocabList = _context.sent;\n            tempLessonList = [];\n\n            if (currentVocabList) {\n              setVocabList(JSON.parse(currentVocabList));\n              console.log(vocabList);\n\n              for (i = 0; i < vocabList.length; i++) {\n                if (vocabList[i].level == \"Unseen\") {\n                  tempLessonList.push(vocabList[i]);\n                }\n              }\n\n              if (tempLessonList.length > 0) {\n                setNoLessons(false);\n              }\n            }\n\n            setLessonList(tempLessonList);\n            setLessonListFound(true);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!lessonListFound) {\n    getLessonList();\n  }\n\n  var renderSenses = function renderSenses(index) {\n    return lessonList[index].translatedWordList.map(function (data, key) {\n      return React.createElement(View, {\n        key: key,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.translatedWordList,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }, key + 1, \". \", data), React.createElement(Text, {\n        style: styles.definitionsList,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      }, lessonList[index].definitionsList[key]));\n    });\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, lessonListFound && !noLessons ? React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.vocabWord,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, lessonList[currentWordIndex].vocabWord), React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return console.log(\"NEXT WORD\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: [styles.nextButton, {\n      backgroundColor: COLORS.light_gray\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"NEXT\")), renderSenses(currentWordIndex)) : null);\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.pastel_purple,\n    alignItems: \"center\",\n    paddingTop: Platform.OS === \"android\" ? 50 : 0\n  },\n  vocabWord: {\n    fontFamily: \"Roboto-Black\",\n    fontSize: 40,\n    color: \"white\"\n  },\n  translatedWordList: {\n    fontFamily: \"Roboto-Bold\",\n    fontSize: 20,\n    color: \"white\",\n    marginTop: 15\n  },\n  definitionsList: {\n    fontFamily: \"Roboto-Light\",\n    fontSize: 18,\n    color: \"white\",\n    marginBottom: 15\n  },\n  nextButton: _objectSpread({\n    alignSelf: \"flex-end\",\n    textAlign: \"center\",\n    textAlignVertical: \"center\",\n    borderRadius: 25,\n    fontFamily: \"Roboto-Black\",\n    fontSize: 25,\n    color: \"white\",\n    width: 125,\n    height: 75,\n    overflow: \"hidden\"\n  }, Platform.select({\n    ios: {\n      lineHeight: 75\n    },\n    android: {}\n  }))\n});\nexport default LearnWordScreen;","map":{"version":3,"sources":["/Users/eliothyenne/Daneo/app/screens/LearnWordScreen.js"],"names":["React","useState","COLORS","AsyncStorage","LearnWordScreen","route","navigation","vocabList","setVocabList","lessonList","setLessonList","lessonListFound","setLessonListFound","noLessons","setNoLessons","currentWordIndex","setCurrentWordIndex","getLessonList","getItem","currentVocabList","tempLessonList","JSON","parse","console","log","i","length","level","push","renderSenses","index","translatedWordList","map","data","key","styles","definitionsList","container","vocabWord","nextButton","backgroundColor","light_gray","StyleSheet","create","flex","pastel_purple","alignItems","paddingTop","Platform","OS","fontFamily","fontSize","color","marginTop","marginBottom","alignSelf","textAlign","textAlignVertical","borderRadius","width","height","overflow","select","ios","lineHeight","android"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, SafeAreaView, Platform, View, Text } from \"react-native\";\nimport { COLORS } from \"../config/colors.js\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst LearnWordScreen = ({ route, navigation }) => {\n  const [vocabList, setVocabList] = useState([]);\n  const [lessonList, setLessonList] = useState([]);\n  const [lessonListFound, setLessonListFound] = useState(false);\n  const [noLessons, setNoLessons] = useState(true);\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n\n  const getLessonList = async () => {\n    const currentVocabList = await AsyncStorage.getItem(\"@vocabList\");\n    var tempLessonList = [];\n\n    if (currentVocabList) {\n      setVocabList(JSON.parse(currentVocabList));\n      console.log(vocabList);\n\n      for (var i = 0; i < vocabList.length; i++) {\n        if (vocabList[i].level == \"Unseen\") {\n          tempLessonList.push(vocabList[i]);\n        }\n      }\n      if (tempLessonList.length > 0) {\n        setNoLessons(false);\n      }\n    }\n    setLessonList(tempLessonList);\n    setLessonListFound(true);\n  };\n\n  if (!lessonListFound) {\n    getLessonList();\n  }\n\n  const renderSenses = (index) => {\n    return lessonList[index].translatedWordList.map((data, key) => {\n      return (\n        <View key={key}>\n          <Text style={styles.translatedWordList}>\n            {key + 1}. {data}\n          </Text>\n          <Text style={styles.definitionsList}>{lessonList[index].definitionsList[key]}</Text>\n        </View>\n      );\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {lessonListFound && !noLessons ? (\n        <View>\n          <Text style={styles.vocabWord}>{lessonList[currentWordIndex].vocabWord}</Text>\n          <TouchableWithoutFeedback onPress={() => console.log(\"NEXT WORD\")}>\n            <Text style={[styles.nextButton, { backgroundColor: COLORS.light_gray }]}>NEXT</Text>\n          </TouchableWithoutFeedback>\n          {renderSenses(currentWordIndex)}\n        </View>\n      ) : null}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.pastel_purple,\n    alignItems: \"center\",\n    paddingTop: Platform.OS === \"android\" ? 50 : 0,\n  },\n  vocabWord: {\n    fontFamily: \"Roboto-Black\",\n    fontSize: 40,\n    color: \"white\",\n  },\n  translatedWordList: {\n    fontFamily: \"Roboto-Bold\",\n    fontSize: 20,\n    color: \"white\",\n    marginTop: 15,\n  },\n  definitionsList: {\n    fontFamily: \"Roboto-Light\",\n    fontSize: 18,\n    color: \"white\",\n    marginBottom: 15,\n  },\n  nextButton: {\n    alignSelf: \"flex-end\",\n    textAlign: \"center\",\n    textAlignVertical: \"center\",\n    borderRadius: 25,\n    fontFamily: \"Roboto-Black\",\n    fontSize: 25,\n    color: \"white\",\n    width: 125,\n    height: 75,\n    overflow: \"hidden\",\n    ...Platform.select({\n      ios: {\n        lineHeight: 75, // as same as height\n      },\n      android: {},\n    }),\n  },\n});\n\nexport default LearnWordScreen;\n"]},"metadata":{},"sourceType":"module"}