{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from '@unimodules/core';\nimport UAParser from 'ua-parser-js';\nimport { DeviceType } from \"./Device.types\";\nvar result = null;\n\nif (Platform.isDOMAvailable) {\n  var parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nexport default {\n  get isDevice() {\n    return true;\n  },\n\n  get brand() {\n    return null;\n  },\n\n  get manufacturer() {\n    return result && result.device.vendor || null;\n  },\n\n  get modelName() {\n    return result && result.device.model || null;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get totalMemory() {\n    return null;\n  },\n\n  get supportedCpuArchitectures() {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n\n  get osName() {\n    return result && result.os.name || '';\n  },\n\n  get osVersion() {\n    return result && result.os.version || '';\n  },\n\n  get osBuildId() {\n    return null;\n  },\n\n  get osInternalBuildId() {\n    return null;\n  },\n\n  get deviceName() {\n    return null;\n  },\n\n  getDeviceTypeAsync: function getDeviceTypeAsync() {\n    return _regeneratorRuntime.async(function getDeviceTypeAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = result.device.type;\n            _context.next = _context.t0 === 'mobile' ? 3 : _context.t0 === 'tablet' ? 4 : _context.t0 === 'smarttv' ? 5 : _context.t0 === 'console' ? 6 : _context.t0 === 'embedded' ? 6 : _context.t0 === 'wearable' ? 6 : 7;\n            break;\n\n          case 3:\n            return _context.abrupt(\"return\", DeviceType.PHONE);\n\n          case 4:\n            return _context.abrupt(\"return\", DeviceType.TABLET);\n\n          case 5:\n            return _context.abrupt(\"return\", DeviceType.TV);\n\n          case 6:\n            return _context.abrupt(\"return\", DeviceType.UNKNOWN);\n\n          case 7:\n            return _context.abrupt(\"return\", DeviceType.DESKTOP);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  isRootedExperimentalAsync: function isRootedExperimentalAsync() {\n    return _regeneratorRuntime.async(function isRootedExperimentalAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", false);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoDevice.web.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAyB,kBAAzB;AACA,OAAO,QAAP,MAAqB,cAArB;AAEA,SAAS,UAAT;AAEA,IAAI,MAAM,GAAQ,IAAlB;;AACA,IAAI,QAAQ,CAAC,cAAb,EAA6B;AAC3B,MAAM,MAAM,GAAG,IAAI,QAAJ,CAAa,MAAM,CAAC,SAAP,CAAiB,SAA9B,CAAf;AACA,EAAA,MAAM,GAAG,MAAM,CAAC,SAAP,EAAT;AACD;;AAED,eAAe;AACb,MAAI,QAAJ,GAAY;AACV,WAAO,IAAP;AACD,GAHY;;AAIb,MAAI,KAAJ,GAAS;AACP,WAAO,IAAP;AACD,GANY;;AAOb,MAAI,YAAJ,GAAgB;AACd,WAAQ,MAAM,IAAI,MAAM,CAAC,MAAP,CAAc,MAAzB,IAAoC,IAA3C;AACD,GATY;;AAUb,MAAI,SAAJ,GAAa;AACX,WAAQ,MAAM,IAAI,MAAM,CAAC,MAAP,CAAc,KAAzB,IAAmC,IAA1C;AACD,GAZY;;AAab,MAAI,eAAJ,GAAmB;AACjB,WAAO,IAAP;AACD,GAfY;;AAgBb,MAAI,WAAJ,GAAe;AACb,WAAO,IAAP;AACD,GAlBY;;AAmBb,MAAI,yBAAJ,GAA6B;AAC3B,WAAO,MAAM,IAAI,MAAM,CAAC,GAAP,CAAW,YAArB,GAAoC,CAAC,MAAM,CAAC,GAAP,CAAW,YAAZ,CAApC,GAAgE,IAAvE;AACD,GArBY;;AAsBb,MAAI,MAAJ,GAAU;AACR,WAAQ,MAAM,IAAI,MAAM,CAAC,EAAP,CAAU,IAArB,IAA8B,EAArC;AACD,GAxBY;;AAyBb,MAAI,SAAJ,GAAa;AACX,WAAQ,MAAM,IAAI,MAAM,CAAC,EAAP,CAAU,OAArB,IAAiC,EAAxC;AACD,GA3BY;;AA4Bb,MAAI,SAAJ,GAAa;AACX,WAAO,IAAP;AACD,GA9BY;;AA+Bb,MAAI,iBAAJ,GAAqB;AACnB,WAAO,IAAP;AACD,GAjCY;;AAkCb,MAAI,UAAJ,GAAc;AACZ,WAAO,IAAP;AACD,GApCY;;AAqCP,EAAA,kBArCO;AAAA;AAAA;AAAA;AAAA;AAAA,0BAsCH,MAAM,CAAC,MAAP,CAAc,IAtCX;AAAA,4CAuCJ,QAvCI,uBAyCJ,QAzCI,uBA2CJ,SA3CI,uBA6CJ,SA7CI,uBA8CJ,UA9CI,uBA+CJ,UA/CI;AAAA;;AAAA;AAAA,6CAwCA,UAAU,CAAC,KAxCX;;AAAA;AAAA,6CA0CA,UAAU,CAAC,MA1CX;;AAAA;AAAA,6CA4CA,UAAU,CAAC,EA5CX;;AAAA;AAAA,6CAgDA,UAAU,CAAC,OAhDX;;AAAA;AAAA,6CAkDA,UAAU,CAAC,OAlDX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDP,EAAA,yBArDO;AAAA;AAAA;AAAA;AAAA;AAAA,8CAsDJ,KAtDI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { Platform } from '@unimodules/core';\nimport UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\nlet result: any = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return (result && result.device.vendor) || null;\n  },\n  get modelName(): string | null {\n    return (result && result.device.model) || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get totalMemory(): null {\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return (result && result.os.name) || '';\n  },\n  get osVersion(): string {\n    return (result && result.os.version) || '';\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    switch (result.device.type) {\n      case 'mobile':\n        return DeviceType.PHONE;\n      case 'tablet':\n        return DeviceType.TABLET;\n      case 'smarttv':\n        return DeviceType.TV;\n      case 'console':\n      case 'embedded':\n      case 'wearable':\n        return DeviceType.UNKNOWN;\n      default:\n        return DeviceType.DESKTOP;\n    }\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}