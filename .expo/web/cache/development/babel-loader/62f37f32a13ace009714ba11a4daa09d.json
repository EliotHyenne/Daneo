{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var prefixMatch;\n  prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n\n  exports.normalize = function (str) {\n    return str.toLowerCase();\n  };\n\n  exports.firstCharLowerCase = function (str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  };\n\n  exports.stripPrefix = function (str) {\n    return str.replace(prefixMatch, '');\n  };\n\n  exports.parseNumbers = function (str) {\n    if (!isNaN(str)) {\n      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n    }\n\n    return str;\n  };\n\n  exports.parseBooleans = function (str) {\n    if (/^(?:true|false)$/i.test(str)) {\n      str = str.toLowerCase() === 'true';\n    }\n\n    return str;\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/eliothyenne/Daneo/node_modules/react-native-xml2js/lib/processors.js"],"names":["prefixMatch","RegExp","exports","normalize","str","toLowerCase","firstCharLowerCase","charAt","slice","stripPrefix","replace","parseNumbers","isNaN","parseInt","parseFloat","parseBooleans","test","call"],"mappings":"AACA,CAAC,YAAW;AACV;;AACA,MAAIA,WAAJ;AAEAA,EAAAA,WAAW,GAAG,IAAIC,MAAJ,CAAW,eAAX,CAAd;;AAEAC,EAAAA,OAAO,CAACC,SAAR,GAAoB,UAASC,GAAT,EAAc;AAChC,WAAOA,GAAG,CAACC,WAAJ,EAAP;AACD,GAFD;;AAIAH,EAAAA,OAAO,CAACI,kBAAR,GAA6B,UAASF,GAAT,EAAc;AACzC,WAAOA,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcF,WAAd,KAA8BD,GAAG,CAACI,KAAJ,CAAU,CAAV,CAArC;AACD,GAFD;;AAIAN,EAAAA,OAAO,CAACO,WAAR,GAAsB,UAASL,GAAT,EAAc;AAClC,WAAOA,GAAG,CAACM,OAAJ,CAAYV,WAAZ,EAAyB,EAAzB,CAAP;AACD,GAFD;;AAIAE,EAAAA,OAAO,CAACS,YAAR,GAAuB,UAASP,GAAT,EAAc;AACnC,QAAI,CAACQ,KAAK,CAACR,GAAD,CAAV,EAAiB;AACfA,MAAAA,GAAG,GAAGA,GAAG,GAAG,CAAN,KAAY,CAAZ,GAAgBS,QAAQ,CAACT,GAAD,EAAM,EAAN,CAAxB,GAAoCU,UAAU,CAACV,GAAD,CAApD;AACD;;AACD,WAAOA,GAAP;AACD,GALD;;AAOAF,EAAAA,OAAO,CAACa,aAAR,GAAwB,UAASX,GAAT,EAAc;AACpC,QAAI,oBAAoBY,IAApB,CAAyBZ,GAAzB,CAAJ,EAAmC;AACjCA,MAAAA,GAAG,GAAGA,GAAG,CAACC,WAAJ,OAAsB,MAA5B;AACD;;AACD,WAAOD,GAAP;AACD,GALD;AAOD,CAhCD,EAgCGa,IAhCH,CAgCQ,IAhCR","sourcesContent":["// Generated by CoffeeScript 1.11.1\n(function() {\n  \"use strict\";\n  var prefixMatch;\n\n  prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n\n  exports.normalize = function(str) {\n    return str.toLowerCase();\n  };\n\n  exports.firstCharLowerCase = function(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  };\n\n  exports.stripPrefix = function(str) {\n    return str.replace(prefixMatch, '');\n  };\n\n  exports.parseNumbers = function(str) {\n    if (!isNaN(str)) {\n      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n    }\n    return str;\n  };\n\n  exports.parseBooleans = function(str) {\n    if (/^(?:true|false)$/i.test(str)) {\n      str = str.toLowerCase() === 'true';\n    }\n    return str;\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}