{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nexport var RootControllerChanges;\n\n(function (RootControllerChanges) {\n  RootControllerChanges[RootControllerChanges[\"Insert\"] = 0] = \"Insert\";\n  RootControllerChanges[RootControllerChanges[\"Update\"] = 1] = \"Update\";\n  RootControllerChanges[RootControllerChanges[\"Remove\"] = 2] = \"Remove\";\n})(RootControllerChanges || (RootControllerChanges = {}));\n\nvar RootController = function () {\n  function RootController() {\n    _classCallCheck(this, RootController);\n\n    this.siblings = new Set();\n    this.pendingActions = [];\n    this.callback = null;\n  }\n\n  _createClass(RootController, [{\n    key: \"update\",\n    value: function update(id, element, callback) {\n      if (!this.siblings.has(id)) {\n        this.emit(id, {\n          change: RootControllerChanges.Insert,\n          element: element,\n          updateCallback: callback\n        });\n        this.siblings.add(id);\n      } else {\n        this.emit(id, {\n          change: RootControllerChanges.Update,\n          element: element,\n          updateCallback: callback\n        });\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(id, callback) {\n      if (this.siblings.has(id)) {\n        this.emit(id, {\n          change: RootControllerChanges.Remove,\n          element: null,\n          updateCallback: callback\n        });\n        this.siblings.delete(id);\n      } else if (callback) {\n        callback();\n      }\n    }\n  }, {\n    key: \"setCallback\",\n    value: function setCallback(callback) {\n      this.callback = callback;\n      this.pendingActions.forEach(function (_ref) {\n        var id = _ref.id,\n            action = _ref.action;\n        callback(id, action);\n      });\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(id, action) {\n      if (this.callback) {\n        this.callback(id, action);\n      } else {\n        this.pendingActions.push({\n          action: action,\n          id: id\n        });\n      }\n    }\n  }]);\n\n  return RootController;\n}();\n\nexport { RootController as default };","map":{"version":3,"sources":["../src/RootController.ts"],"names":[],"mappings":";;AAEA,OAAA,IAAY,qBAAZ;;AAAA,CAAA,UAAY,qBAAZ,EAAiC;AAC/B,EAAA,qBAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,qBAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,qBAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAY,qBAAqB,KAArB,qBAAqB,GAAA,EAAA,CAAjC;;IAYqB,c;AAArB,4BAAA;AAAA;;AACU,SAAA,QAAA,GAAwB,IAAI,GAAJ,EAAxB;AACA,SAAA,cAAA,GAGH,EAHG;AAIA,SAAA,QAAA,GAEG,IAFH;AAqDT;;;;WAjDQ,gBAAO,EAAP,EAAmB,OAAnB,EAAuC,QAAvC,EAA4D;AACjE,UAAI,CAAC,KAAK,QAAL,CAAc,GAAd,CAAkB,EAAlB,CAAL,EAA4B;AAC1B,aAAK,IAAL,CAAU,EAAV,EAAc;AACZ,UAAA,MAAM,EAAE,qBAAqB,CAAC,MADlB;AAEZ,UAAA,OAAO,EAAP,OAFY;AAGZ,UAAA,cAAc,EAAE;AAHJ,SAAd;AAKA,aAAK,QAAL,CAAc,GAAd,CAAkB,EAAlB;AACD,OAPD,MAOO;AACL,aAAK,IAAL,CAAU,EAAV,EAAc;AACZ,UAAA,MAAM,EAAE,qBAAqB,CAAC,MADlB;AAEZ,UAAA,OAAO,EAAP,OAFY;AAGZ,UAAA,cAAc,EAAE;AAHJ,SAAd;AAKD;AACF;;;WAEM,iBAAQ,EAAR,EAAoB,QAApB,EAAyC;AAC9C,UAAI,KAAK,QAAL,CAAc,GAAd,CAAkB,EAAlB,CAAJ,EAA2B;AACzB,aAAK,IAAL,CAAU,EAAV,EAAc;AACZ,UAAA,MAAM,EAAE,qBAAqB,CAAC,MADlB;AAEZ,UAAA,OAAO,EAAE,IAFG;AAGZ,UAAA,cAAc,EAAE;AAHJ,SAAd;AAKA,aAAK,QAAL,CAAc,MAAd,CAAqB,EAArB;AACD,OAPD,MAOO,IAAI,QAAJ,EAAc;AACnB,QAAA,QAAQ;AACT;AACF;;;WAEM,qBACL,QADK,EACuD;AAE5D,WAAK,QAAL,GAAgB,QAAhB;AACA,WAAK,cAAL,CAAoB,OAApB,CAA4B,gBAAmB;AAAA,YAAhB,EAAgB,QAAhB,EAAgB;AAAA,YAAZ,MAAY,QAAZ,MAAY;AAC7C,QAAA,QAAQ,CAAC,EAAD,EAAK,MAAL,CAAR;AACD,OAFD;AAGD;;;WAEO,cAAK,EAAL,EAAiB,MAAjB,EAA6C;AACnD,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,QAAL,CAAc,EAAd,EAAkB,MAAlB;AACD,OAFD,MAEO;AACL,aAAK,cAAL,CAAoB,IAApB,CAAyB;AACvB,UAAA,MAAM,EAAN,MADuB;AAEvB,UAAA,EAAE,EAAF;AAFuB,SAAzB;AAID;AACF;;;;;;SA1DkB,c","sourceRoot":"","sourcesContent":["export var RootControllerChanges;\n(function (RootControllerChanges) {\n    RootControllerChanges[RootControllerChanges[\"Insert\"] = 0] = \"Insert\";\n    RootControllerChanges[RootControllerChanges[\"Update\"] = 1] = \"Update\";\n    RootControllerChanges[RootControllerChanges[\"Remove\"] = 2] = \"Remove\";\n})(RootControllerChanges || (RootControllerChanges = {}));\nexport default class RootController {\n    constructor() {\n        this.siblings = new Set();\n        this.pendingActions = [];\n        this.callback = null;\n    }\n    update(id, element, callback) {\n        if (!this.siblings.has(id)) {\n            this.emit(id, {\n                change: RootControllerChanges.Insert,\n                element,\n                updateCallback: callback\n            });\n            this.siblings.add(id);\n        }\n        else {\n            this.emit(id, {\n                change: RootControllerChanges.Update,\n                element,\n                updateCallback: callback\n            });\n        }\n    }\n    destroy(id, callback) {\n        if (this.siblings.has(id)) {\n            this.emit(id, {\n                change: RootControllerChanges.Remove,\n                element: null,\n                updateCallback: callback\n            });\n            this.siblings.delete(id);\n        }\n        else if (callback) {\n            callback();\n        }\n    }\n    setCallback(callback) {\n        this.callback = callback;\n        this.pendingActions.forEach(({ id, action }) => {\n            callback(id, action);\n        });\n    }\n    emit(id, action) {\n        if (this.callback) {\n            this.callback(id, action);\n        }\n        else {\n            this.pendingActions.push({\n                action,\n                id\n            });\n        }\n    }\n}\n//# sourceMappingURL=RootController.js.map"]},"metadata":{},"sourceType":"module"}