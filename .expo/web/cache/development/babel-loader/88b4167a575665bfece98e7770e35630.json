{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/eliothyenne/Daneo/app/screens/WordListScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { SearchBar } from \"react-native-elements\";\nimport { COLORS } from \"../config/colors.js\";\nimport WordInfoComponent from \"../components/WordInfoComponent.js\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\n\nvar WordListScreen = function WordListScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchInputText = _useState2[0],\n      setSearchInputText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      vocabList = _useState4[0],\n      setVocabList = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filteredVocabList = _useState6[0],\n      setFilteredVocabList = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      vocabListFound = _useState8[0],\n      setVocabListFound = _useState8[1];\n\n  var getVocabWordList = function getVocabWordList() {\n    var currentVocabList;\n    return _regeneratorRuntime.async(function getVocabWordList$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"@vocabList\"));\n\n          case 2:\n            currentVocabList = _context.sent;\n\n            if (currentVocabList) {\n              setVocabList(JSON.parse(currentVocabList).reverse());\n              setFilteredVocabList(JSON.parse(currentVocabList).reverse());\n            }\n\n            setVocabListFound(true);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!vocabListFound) {\n    getVocabWordList();\n  }\n\n  var handleOnClear = function handleOnClear() {\n    if (_this.search != null) {\n      _this.search.focus();\n    }\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(View, {\n      style: styles.wordContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, React.createElement(WordInfoComponent, {\n      vocabWord: item.vocabWord,\n      level: item.level,\n      translatedWordList: item.translatedWordList,\n      definitionsList: item.definitionsList,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var filter = function filter(text, element) {\n    if (element.vocabWord === text) {\n      return true;\n    }\n\n    for (var i = 0; i < element.vocabWord.length; i++) {\n      if (element.vocabWord.charAt(i) === text) {\n        return true;\n      }\n    }\n\n    for (i = 0; i < element.translatedWordList.length; i++) {\n      if (element.translatedWordList[i] != null && element.translatedWordList[i].toLowerCase().split(/[\\s;]+/).includes(text.toLowerCase())) {\n        return true;\n      }\n    }\n\n    for (i = 0; i < element.definitionsList.length; i++) {\n      if (element.translatedWordList[i] != null && element.definitionsList[i].toLowerCase().split(/[\\s,.;:]+/).includes(text.toLowerCase())) {\n        return true;\n      }\n    }\n  };\n\n  var handleSearch = function handleSearch(text) {\n    var data = vocabList;\n\n    if (text) {\n      var filteredList = data.filter(function (element) {\n        return filter(text, element);\n      });\n      setFilteredVocabList(filteredList);\n    } else {\n      setFilteredVocabList(data);\n    }\n\n    setSearchInputText(text);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.searchBar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, React.createElement(SearchBar, {\n    ref: function ref(search) {\n      return _this.search = search;\n    },\n    onClear: handleOnClear,\n    round: true,\n    searchIcon: {\n      size: 25,\n      color: \"white\",\n      paddingLeft: 10\n    },\n    clearIcon: {\n      size: 20,\n      color: \"white\"\n    },\n    value: searchInputText,\n    onChangeText: function onChangeText(value) {\n      return handleSearch(value);\n    },\n    placeholder: \"Search word..\",\n    placeholderTextColor: \"#e3f3ff\",\n    inputContainerStyle: {\n      backgroundColor: COLORS.pastel_blue\n    },\n    leftIconContainerStyle: {\n      backgroundColor: COLORS.pastel_blue\n    },\n    inputStyle: {\n      backgroundColor: COLORS.pastel_blue,\n      fontFamily: \"Roboto-Regular\",\n      fontSize: 21,\n      color: \"white\"\n    },\n    containerStyle: {\n      backgroundColor: COLORS.pastel_purple,\n      justifyContent: \"space-around\",\n      borderTopWidth: 0,\n      borderBottomWidth: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })), React.createElement(FlatList, {\n    data: filteredVocabList,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item, index) {\n      return index.toString();\n    },\n    ListEmptyComponent: React.createElement(Text, {\n      style: [styles.error, {\n        marginTop: 200\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }, \"\\xAF\\\\(\\xB0_o)/\\xAF\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.pastel_purple,\n    alignItems: \"center\",\n    paddingTop: Platform.OS === \"android\" ? 50 : 0\n  },\n  wordContainer: {\n    backgroundColor: COLORS.light_gray,\n    margin: 25,\n    marginTop: 0,\n    padding: 25,\n    borderRadius: 25\n  },\n  searchBar: {\n    width: \"90%\",\n    height: 65,\n    fontFamily: \"Roboto-Regular\",\n    fontSize: 21,\n    marginBottom: 25\n  },\n  error: {\n    height: 65,\n    fontFamily: \"Roboto-Regular\",\n    fontSize: 25,\n    color: \"#e3f3ff\"\n  }\n});\nexport default WordListScreen;","map":{"version":3,"sources":["/Users/eliothyenne/Daneo/app/screens/WordListScreen.js"],"names":["React","useState","SearchBar","COLORS","WordInfoComponent","AsyncStorage","WordListScreen","route","navigation","searchInputText","setSearchInputText","vocabList","setVocabList","filteredVocabList","setFilteredVocabList","vocabListFound","setVocabListFound","getVocabWordList","getItem","currentVocabList","JSON","parse","reverse","handleOnClear","search","focus","renderItem","item","styles","wordContainer","vocabWord","level","translatedWordList","definitionsList","filter","text","element","i","length","charAt","toLowerCase","split","includes","handleSearch","data","filteredList","container","searchBar","size","color","paddingLeft","value","backgroundColor","pastel_blue","fontFamily","fontSize","pastel_purple","justifyContent","borderTopWidth","borderBottomWidth","index","toString","error","marginTop","StyleSheet","create","flex","alignItems","paddingTop","Platform","OS","light_gray","margin","padding","borderRadius","width","height","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, SafeAreaView, Platform, View, Text } from \"react-native\";\nimport { SearchBar } from \"react-native-elements\";\nimport { COLORS } from \"../config/colors.js\";\nimport WordInfoComponent from \"../components/WordInfoComponent.js\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { FlatList } from \"react-native\";\n\nconst WordListScreen = ({ route, navigation }) => {\n  const [searchInputText, setSearchInputText] = useState(\"\");\n  const [vocabList, setVocabList] = useState([]);\n  const [filteredVocabList, setFilteredVocabList] = useState([]);\n  const [vocabListFound, setVocabListFound] = useState(false);\n\n  const getVocabWordList = async () => {\n    const currentVocabList = await AsyncStorage.getItem(\"@vocabList\");\n\n    if (currentVocabList) {\n      setVocabList(JSON.parse(currentVocabList).reverse());\n      setFilteredVocabList(JSON.parse(currentVocabList).reverse());\n    }\n    setVocabListFound(true);\n  };\n\n  if (!vocabListFound) {\n    getVocabWordList();\n  }\n\n  const handleOnClear = () => {\n    if (this.search != null) {\n      this.search.focus();\n    }\n  };\n\n  const renderItem = ({ item }) => {\n    return (\n      <View style={styles.wordContainer}>\n        <WordInfoComponent\n          vocabWord={item.vocabWord}\n          level={item.level}\n          translatedWordList={item.translatedWordList}\n          definitionsList={item.definitionsList}\n        ></WordInfoComponent>\n      </View>\n    );\n  };\n\n  const filter = (text, element) => {\n    if (element.vocabWord === text) {\n      return true;\n    }\n\n    for (var i = 0; i < element.vocabWord.length; i++) {\n      if (element.vocabWord.charAt(i) === text) {\n        return true;\n      }\n    }\n\n    for (i = 0; i < element.translatedWordList.length; i++) {\n      if (\n        element.translatedWordList[i] != null &&\n        element.translatedWordList[i]\n          .toLowerCase()\n          .split(/[\\s;]+/)\n          .includes(text.toLowerCase())\n      ) {\n        return true;\n      }\n    }\n\n    for (i = 0; i < element.definitionsList.length; i++) {\n      if (\n        element.translatedWordList[i] != null &&\n        element.definitionsList[i]\n          .toLowerCase()\n          .split(/[\\s,.;:]+/)\n          .includes(text.toLowerCase())\n      ) {\n        return true;\n      }\n    }\n  };\n\n  const handleSearch = (text) => {\n    const data = vocabList;\n    if (text) {\n      const filteredList = data.filter((element) => filter(text, element));\n      setFilteredVocabList(filteredList);\n    } else {\n      setFilteredVocabList(data);\n    }\n    setSearchInputText(text);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.searchBar}>\n        <SearchBar\n          ref={(search) => (this.search = search)}\n          onClear={handleOnClear}\n          round\n          searchIcon={{ size: 25, color: \"white\", paddingLeft: 10 }}\n          clearIcon={{ size: 20, color: \"white\" }}\n          value={searchInputText}\n          onChangeText={(value) => handleSearch(value)}\n          placeholder=\"Search word..\"\n          placeholderTextColor=\"#e3f3ff\"\n          inputContainerStyle={{ backgroundColor: COLORS.pastel_blue }}\n          leftIconContainerStyle={{ backgroundColor: COLORS.pastel_blue }}\n          inputStyle={{\n            backgroundColor: COLORS.pastel_blue,\n            fontFamily: \"Roboto-Regular\",\n            fontSize: 21,\n            color: \"white\",\n          }}\n          containerStyle={{\n            backgroundColor: COLORS.pastel_purple,\n            justifyContent: \"space-around\",\n            borderTopWidth: 0,\n            borderBottomWidth: 0,\n          }}\n        />\n      </View>\n      <FlatList\n        data={filteredVocabList}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => index.toString()}\n        ListEmptyComponent={<Text style={[styles.error, { marginTop: 200 }]}>¯\\(°_o)/¯</Text>}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.pastel_purple,\n    alignItems: \"center\",\n    paddingTop: Platform.OS === \"android\" ? 50 : 0,\n  },\n  wordContainer: {\n    backgroundColor: COLORS.light_gray,\n    margin: 25,\n    marginTop: 0,\n    padding: 25,\n    borderRadius: 25,\n  },\n  searchBar: {\n    width: \"90%\",\n    height: 65,\n    fontFamily: \"Roboto-Regular\",\n    fontSize: 21,\n    marginBottom: 25,\n  },\n  error: {\n    height: 65,\n    fontFamily: \"Roboto-Regular\",\n    fontSize: 25,\n    color: \"#e3f3ff\",\n  },\n});\n\nexport default WordListScreen;\n"]},"metadata":{},"sourceType":"module"}